{"version":3,"sources":["criptomonedas.svg","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","MensajeError","p","Error","mensaje","Boton","button","Formulario","setMoneda","setCriptomoneda","useState","listaCripto","guardarCriptomonedas","error","setError","stateInicial","opciones","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useMoneda","moneda","SelectMoneda","CoinInfo","Id","Name","FullName","useCriptoMoneda","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Footer","footer","Imagen","img","Heading","h1","App","setResultado","cargando","setCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6b8afa36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/criptomonedas.c5225395.svg\";","import React, { useState, Fragment } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color:#fff;\r\n    text-transform:uppercase;\r\n    font-weight:bold;\r\n    font-size:2.4rem;\r\n    margin-top:2rem;\r\n    display:block;\r\n` \r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding:1rem;\r\n    border-radius:10px;\r\n    border:none;\r\n    font-size:1.2rem;\r\n`\r\n\r\nexport const useMoneda = (label, stateInicial, opciones) => {\r\n    // State de nuestro customhook\r\n    const [state, actualizarState] = useState(stateInicial)\r\n\r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={e=>actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">-Seleccione-</option>\r\n                {opciones.map(opcion=>(\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))\r\n                }\r\n            </Select>\r\n        </Fragment>\r\n    )\r\n\r\n    // Retornar state, interfaz y funcion que modifica el state\r\n    return [state, Seleccionar, actualizarState]\r\n}\r\n","import React, { useState, Fragment } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color:#fff;\r\n    text-transform:uppercase;\r\n    font-weight:bold;\r\n    font-size:2.4rem;\r\n    margin-top:2rem;\r\n    display:block;\r\n` \r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding:1rem;\r\n    border-radius:10px;\r\n    border:none;\r\n    font-size:1.2rem;\r\n`\r\n\r\nexport const useCriptoMoneda = (label, stateInicial, opciones) => {\r\n    // State de nuestro customhook\r\n    const [state, actualizarState] = useState(stateInicial)\r\n\r\n    const SeleccionarCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={e=>actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">-Seleccione-</option>\r\n                {opciones.map(opcion=>(\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))\r\n                }\r\n            </Select>\r\n        </Fragment>\r\n    )\r\n\r\n    // Retornar state, interfaz y funcion que modifica el state\r\n    return [state, SeleccionarCripto, actualizarState]\r\n}\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport PropTypes from 'prop-types' \r\n\r\nconst MensajeError = styled.p`\r\n    background-color:#b7322c;\r\n    padding:1rem;\r\n    color:#fff;\r\n    font-size:30px;\r\n    text-transform:uppercase;\r\n    font-weight:bold;\r\n    text-align:center;\r\n    font-family:'Bebas Neue', cursive;\r\n`\r\n\r\nexport const Error = ({mensaje}) => {\r\n    return (\r\n        <MensajeError>\r\n            {mensaje}\r\n        </MensajeError>\r\n    )\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}","import React, { useEffect, useState } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { useMoneda } from '../hooks/useMoneda'\r\nimport { useCriptoMoneda } from '../hooks/useCriptomoneda'\r\nimport { Error } from './Error'\r\nimport axios from 'axios'\r\n\r\nconst Boton = styled.button`\r\n    margin-top:20px;\r\n    font-weight:bold;\r\n    font-size:20px;\r\n    padding:10px;\r\n    background-color:#66a2fe;\r\n    border:none;\r\n    width: 100%;\r\n    border-radius:10px;\r\n    color:#fff;\r\n    transition:background-color .3s ease;\r\n    &:hover{\r\n        background-color:#326ac0;\r\n        cursor:pointer;\r\n    }\r\n`\r\n\r\nexport const Formulario = ({setMoneda, setCriptomoneda}) => {\r\n\r\n    // state del listado de criptomonedas\r\n    const[listaCripto, guardarCriptomonedas] = useState([])\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    const monedas = [\r\n        {codigo:'USD', nombre:'USA Dolar'},\r\n        {codigo:'MXN', nombre:'Peso MÃ©xicano'},\r\n        {codigo:'EUR', nombre:'Euro'},\r\n        {codigo:'GBP', nombre:'Libra Esterlina'}\r\n    ]\r\n\r\n    // Utilizar useMoneda\r\n    const [moneda, SelectMoneda] = useMoneda('Elige tu moneda', '',monedas)\r\n\r\n    // Utizando useCriptoMoneda\r\n    const [criptomoneda, SelectCripto] = useCriptoMoneda('Elige tu cripto moneda', '', listaCripto) \r\n\r\n    // Ejecutar llamado a la API\r\n    useEffect(() => {\r\n        const consultarAPI = async () =>{\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD'\r\n            const resultado = await axios.get(url)\r\n            guardarCriptomonedas(resultado.data.Data)\r\n        }\r\n        consultarAPI()\r\n    }, [])\r\n\r\n    // Cuando el usuario hace submit\r\n    const cotizarMoneda = e =>{\r\n        e.preventDefault()\r\n        // validar si ambos campos estan llenos\r\n        if (moneda==='' || criptomoneda === '') {\r\n            setError(true)\r\n            return\r\n        } else {\r\n            // pasar los datos al componenete principal\r\n            setError(false)\r\n            setMoneda(moneda)\r\n            setCriptomoneda(criptomoneda)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form\r\n            onSubmit={cotizarMoneda}\r\n        >   \r\n            {error ? <Error mensaje='Todos los campos son obligatorios' /> : null}\r\n            <SelectMoneda />\r\n            <SelectCripto />\r\n            <Boton\r\n                type=\"submit\"\r\n                value=\"Calcular\"\r\n            >\r\n                Calcular\r\n            </Boton>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color:#fff;\r\n    font-family:Arial, Helvetica, sans-serif;\r\n`\r\n\r\nconst Info = styled.p`\r\n    font-size:18px;\r\n    span{\r\n        font-weight:bold;\r\n    }\r\n` \r\n\r\nconst Precio = styled.p`\r\n    font-size:30px;\r\n    span{\r\n        font-weight:bold;\r\n    }\r\n` \r\n\r\nexport const Cotizacion = ({resultado}) => {\r\n    \r\n    // Para validar que el resultado no venga vacio. Si viene vacio que no haga nada \r\n    if (Object.keys(resultado).length===0) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <ResultadoDiv>\r\n            <Precio>El precio es: <span>{resultado.PRICE}</span></Precio>\r\n            <Info>Precio mÃ¡s alto del dÃ­a: <span>{resultado.HIGHDAY}</span></Info>\r\n            <Info>Precio mÃ¡s bajo del dÃ­a: <span>{resultado.LOWDAY}</span></Info>\r\n            <Info>VariaciÃ³n Ãºltimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span></Info>\r\n            <Info>Ãltima actualizaciÃ³n: <span>{resultado.LASTUPDATE}</span></Info>\r\n        </ResultadoDiv>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div class=\"sk-chase\">\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled'\nimport axios from 'axios';\n\n// para importar imagene en React\nimport imagen from './criptomonedas.svg'\nimport { Formulario } from './components/Formulario';\nimport { Cotizacion } from './components/Cotizacion';\nimport { Spinner } from './components/Spinner';\n\n// styled componenets\nconst Contenedor = styled.div`\n  max-width:900px;\n  margin:0 auto;\n  @media (min-width:992px){\n    display:grid;\n    grid-template-columns:repeat(2,1fr);\n    grid-gap:2rem;\n  }\n`\nconst Footer = styled.footer`\n  max-width:100%;\n  margin:40px auto;\n  text-align:center;\n  color: #fff;\n  margin-top:5rem;\n`\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top:5rem;\n`\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color:#fff;\n  text-align:left;\n  font-weight:700;\n  font-size:50px;\n  margin-bottom:50px;\n  margin-top:80px;\n\n  &::after{\n    content:'';\n    width:100px;\n    height: 6px;\n    background-color:#66A2FE;\n    display:block;\n  }\n`\n\nfunction App() {\n\n  const [moneda, setMoneda] = useState('')\n\n  const [criptomoneda, setCriptomoneda] = useState('')\n\n  const [resultado, setResultado] = useState({})\n\n  const [cargando, setCargando] = useState(false)\n\n  useEffect(() => {\n    const  cotizarCriptomoneda = async() =>{\n      // evitamos la ejecucion por primera vez al cargar el componenete\n      if (moneda==='') {\n        return\n      }\n      // consultar la API para obtener la cotizacion\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`\n    \n      const resultado = await axios.get(url)\n\n      // mostar el Spinner\n      setCargando(true)\n\n      // Ocultar el Spinner y mostar el resultado\n      setTimeout(() => {\n        // cambiar el estado de cargando\n        setCargando(false)\n        // ocupamos la forma de corchetes [ ] para acceder al resultado de la API de forma dinamica\n        setResultado(resultado.data.DISPLAY[criptomoneda][moneda])\n      }, 1500);\n    }\n    cotizarCriptomoneda()\n  }, [moneda, criptomoneda])\n\n  // Mostar el spinner o el resultado\n  const componente = (cargando) ? <Spinner /> : <Cotizacion resultado={resultado} />\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen \n          src={imagen}\n          alt=\"bitcoin\"\n        />\n      </div>\n      <div>\n        <Heading>\n          Cotiza Criptomonedas\n        </Heading>\n        <Formulario \n          setMoneda={setMoneda}\n          setCriptomoneda={setCriptomoneda}\n        />\n        {componente}\n        <Footer>\n          <p>Hecho por Angel LÃ³pez con la tutoria de Juan Pablo de la Torre  | 2020</p>\n        </Footer>\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}